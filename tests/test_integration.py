"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ —Ç–µ—Å—Ç—ã edge cases –¥–ª—è Budget Tracker
"""
import pytest
import os
import tempfile
import json
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from core.DBManager import DBManager
from core.manager import BudgetManager
from core.transaction import Transaction
from core.summary import Summary, tran_type, EXPENSE_TYPE, INCOME_TYPE
from core.plan import Plan, PlanParser


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ workflow"""
    
    def test_full_workflow(self, temp_db_file):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±—é–¥–∂–µ—Ç–∞
        with patch('core.manager.BudgetManager.DB_FILE', temp_db_file):
            manager = BudgetManager()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = [
            Transaction(2000.0, "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "2025-01-01", INCOME_TYPE, -1),
            Transaction(1000.0, "–ü—Ä–æ–¥—É–∫—Ç—ã", "–ü–æ–∫—É–ø–∫–∞", "2025-01-02", EXPENSE_TYPE, -1),
            Transaction(500.0, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–¢–∞–∫—Å–∏", "2025-01-03", EXPENSE_TYPE, -1),
            Transaction(300.0, "–ü—Ä–æ–¥—É–∫—Ç—ã", "–ï—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã", "2025-01-04", EXPENSE_TYPE, -1)
        ]
        
        for transaction in transactions:
            manager.add_transaction(transaction)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        all_transactions = manager.get_transactions()
        assert len(all_transactions) == 4
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å–≤–æ–¥–∫—É
        summary = manager.get_financial_summary()
        assert summary["income"] == 2000.0
        assert summary["expense"] == 1800.0
        assert summary["balance"] == 200.0
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = manager.get_all_categories()
        assert len(categories) == 3
        assert "–ó–∞—Ä–ø–ª–∞—Ç–∞" in categories
        assert "–ü—Ä–æ–¥—É–∫—Ç—ã" in categories
        assert "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç" in categories
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É –æ–ø–µ—Ä–∞—Ü–∏–π
        manager.undo()  # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        assert len(manager.get_transactions()) == 3
        
        manager.redo()  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        assert len(manager.get_transactions()) == 4
        
        # –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_to_delete = manager.get_transactions()[0]
        manager.delete_transaction(transaction_to_delete.id)
        assert len(manager.get_transactions()) == 3
        
        # –û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        manager.undo()
        assert len(manager.get_transactions()) == 4
    
    def test_plan_integration(self, temp_db_file, sample_plan_data):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        with patch('core.manager.BudgetManager.DB_FILE', temp_db_file):
            manager = BudgetManager()
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω
        manager.apply_plan_state(sample_plan_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        current_plan = manager.get_current_plan_state()
        assert current_plan == sample_plan_data
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–æ–º
        transactions = [
            Transaction(1000.0, "–ü—Ä–æ–¥—É–∫—Ç—ã", "–ü–æ–∫—É–ø–∫–∞", "2025-01-01", EXPENSE_TYPE, -1),
            Transaction(500.0, "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–¢–∞–∫—Å–∏", "2025-01-02", EXPENSE_TYPE, -1)
        ]
        
        for transaction in transactions:
            manager.add_transaction(transaction)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_summary = manager.get_summary_by_category()
        assert categories_summary["–ü—Ä–æ–¥—É–∫—Ç—ã"] == -1000.0
        assert categories_summary["–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"] == -500.0


class TestEdgeCases:
    """–¢–µ—Å—Ç—ã –¥–ª—è edge cases –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
    
    def test_empty_database_operations(self, db_manager):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—É—Å—Ç–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –ø—É—Å—Ç–æ–π –±–∞–∑—ã
        transactions = db_manager.get_transactions()
        assert len(transactions) == 0
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø—É—Å—Ç–æ–π –±–∞–∑—ã
        categories = db_manager.get_categories()
        assert len(categories) == 0
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        income = db_manager.get_income_for_category("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        assert income == 0.0
        
        expense = db_manager.get_expense_for_category("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        assert expense == 0.0
    
    def test_large_amounts(self, db_manager):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Å—É–º–º–∞–º–∏"""
        large_amount = 999999999.99
        
        transaction = Transaction(
            amount=large_amount,
            category="–¢–µ—Å—Ç",
            note="–ë–æ–ª—å—à–∞—è —Å—É–º–º–∞",
            date="2025-01-01",
            type_=EXPENSE_TYPE,
            report_id=1
        )
        
        transaction_id = db_manager.add_transaction(transaction)
        assert transaction_id is not None
        
        transactions = db_manager.get_transactions()
        assert len(transactions) == 1
        assert transactions[0].amount == large_amount
    
    def test_special_characters_in_data(self, db_manager):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö"""
        special_data = {
            "category": "–ü—Ä–æ–¥—É–∫—Ç—ã & –ù–∞–ø–∏—Ç–∫–∏",
            "note": "–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ \"–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç\" (—Å–∫–∏–¥–∫–∞ 10%)",
            "date": "2025-01-01"
        }
        
        transaction = Transaction(
            amount=1000.0,
            category=special_data["category"],
            note=special_data["note"],
            date=special_data["date"],
            type_=EXPENSE_TYPE,
            report_id=1
        )
        
        transaction_id = db_manager.add_transaction(transaction)
        assert transaction_id is not None
        
        transactions = db_manager.get_transactions()
        assert len(transactions) == 1
        assert transactions[0].category == special_data["category"]
        assert transactions[0].note == special_data["note"]
    
    def test_unicode_characters(self, db_manager):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏"""
        unicode_data = {
            "category": "–ü—Ä–æ–¥—É–∫—Ç—ã üçé",
            "note": "–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Å —ç–º–æ–¥–∑–∏ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π",
            "date": "2025-01-01"
        }
        
        transaction = Transaction(
            amount=1000.0,
            category=unicode_data["category"],
            note=unicode_data["note"],
            date=unicode_data["date"],
            type_=EXPENSE_TYPE,
            report_id=1
        )
        
        transaction_id = db_manager.add_transaction(transaction)
        assert transaction_id is not None
        
        transactions = db_manager.get_transactions()
        assert len(transactions) == 1
        assert transactions[0].category == unicode_data["category"]
        assert transactions[0].note == unicode_data["note"]
    
    def test_zero_amount_transaction(self, db_manager):
        """–¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω—É–ª–µ–≤–æ–π —Å—É–º–º–æ–π"""
        transaction = Transaction(
            amount=0.0,
            category="–¢–µ—Å—Ç",
            note="–ù—É–ª–µ–≤–∞—è —Å—É–º–º–∞",
            date="2025-01-01",
            type_=EXPENSE_TYPE,
            report_id=1
        )
        
        transaction_id = db_manager.add_transaction(transaction)
        assert transaction_id is not None
        
        transactions = db_manager.get_transactions()
        assert len(transactions) == 1
        assert transactions[0].amount == 0.0
    
    def test_negative_amount_transaction(self, db_manager):
        """–¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π"""
        transaction = Transaction(
            amount=-100.0,
            category="–í–æ–∑–≤—Ä–∞—Ç",
            note="–í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–∞",
            date="2025-01-01",
            type_=EXPENSE_TYPE,
            report_id=1
        )
        
        transaction_id = db_manager.add_transaction(transaction)
        assert transaction_id is not None
        
        transactions = db_manager.get_transactions()
        assert len(transactions) == 1
        assert transactions[0].amount == -100.0
    
    def test_very_long_strings(self, db_manager):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏"""
        long_string = "A" * 1000  # –°—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π 1000 —Å–∏–º–≤–æ–ª–æ–≤
        
        transaction = Transaction(
            amount=1000.0,
            category="–¢–µ—Å—Ç",
            note=long_string,
            date="2025-01-01",
            type_=EXPENSE_TYPE,
            report_id=1
        )
        
        transaction_id = db_manager.add_transaction(transaction)
        assert transaction_id is not None
        
        transactions = db_manager.get_transactions()
        assert len(transactions) == 1
        assert transactions[0].note == long_string
    
    def test_multiple_operations_undo_redo(self, budget_manager):
        """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –æ—Ç–º–µ–Ω—ã/–ø–æ–≤—Ç–æ—Ä–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = [
            Transaction(1000.0, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è1", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è1", "2025-01-01", EXPENSE_TYPE, -1),
            Transaction(2000.0, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è2", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è2", "2025-01-02", EXPENSE_TYPE, -1),
            Transaction(3000.0, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è3", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è3", "2025-01-03", EXPENSE_TYPE, -1)
        ]
        
        for transaction in transactions:
            budget_manager.add_transaction(transaction)
        
        assert len(budget_manager.get_transactions()) == 3
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        budget_manager.undo()  # –û—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é 3
        assert len(budget_manager.get_transactions()) == 2
        
        budget_manager.undo()  # –û—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é 2
        assert len(budget_manager.get_transactions()) == 1
        
        budget_manager.undo()  # –û—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é 1
        assert len(budget_manager.get_transactions()) == 0
        
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        budget_manager.redo()  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é 1
        assert len(budget_manager.get_transactions()) == 1
        
        budget_manager.redo()  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é 2
        assert len(budget_manager.get_transactions()) == 2
        
        budget_manager.redo()  # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é 3
        assert len(budget_manager.get_transactions()) == 3


class TestErrorHandling:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    def test_delete_nonexistent_transaction(self, budget_manager):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        with pytest.raises(ValueError, match="–Ω–µ –Ω–∞–π–¥–µ–Ω–∞"):
            budget_manager.delete_transaction(999)
    
    def test_undo_when_empty_stack(self, budget_manager):
        """–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å—Ç–µ–∫–µ"""
        result = budget_manager.undo()
        assert result is False
    
    def test_redo_when_empty_stack(self, budget_manager):
        """–¢–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å—Ç–µ–∫–µ"""
        result = budget_manager.redo()
        assert result is False
    
    def test_summary_with_empty_transactions(self):
        """–¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        summary = Summary.get_financial_summary([])
        assert summary["income"] == 0.0
        assert summary["expense"] == 0.0
        assert summary["balance"] == 0.0
        assert summary["count"] == 0
        assert summary["avg_check"] == 0.0
    
    def test_summary_with_none_transactions(self):
        """–¢–µ—Å—Ç —Å–≤–æ–¥–∫–∏ —Å None –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        summary = Summary.get_financial_summary(None)
        assert summary["income"] == 0.0
        assert summary["expense"] == 0.0
        assert summary["balance"] == 0.0
        assert summary["count"] == 0
        assert summary["avg_check"] == 0.0


class TestPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    @pytest.mark.slow
    def test_large_number_of_transactions(self, temp_db_file):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        with patch('core.manager.BudgetManager.DB_FILE', temp_db_file):
            manager = BudgetManager()
        
        # –î–æ–±–∞–≤–ª—è–µ–º 1000 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        for i in range(1000):
            transaction = Transaction(
                amount=100.0 + i,
                category=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è{i % 10}",
                note=f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {i}",
                date=f"2025-01-{(i % 28) + 1:02d}",
                type_=EXPENSE_TYPE if i % 2 == 0 else INCOME_TYPE,
                report_id=-1
            )
            manager.add_transaction(transaction)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        transactions = manager.get_transactions()
        assert len(transactions) == 1000
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏
        import time
        start_time = time.time()
        summary = manager.get_financial_summary()
        end_time = time.time()
        
        assert end_time - start_time < 1.0  # –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ —Å–µ–∫—É–Ω–¥—É
        assert summary["count"] == 1000
    
    @pytest.mark.slow
    def test_concurrent_operations(self, temp_db_file):
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        import threading
        import time
        
        with patch('core.manager.BudgetManager.DB_FILE', temp_db_file):
            manager = BudgetManager()
        
        results = []
        
        def add_transactions(thread_id, count):
            """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
            for i in range(count):
                transaction = Transaction(
                    amount=100.0,
                    category=f"–ü–æ—Ç–æ–∫{thread_id}",
                    note=f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {i}",
                    date="2025-01-01",
                    type_=EXPENSE_TYPE,
                    report_id=-1
                )
                manager.add_transaction(transaction)
            results.append(f"–ü–æ—Ç–æ–∫ {thread_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤
        threads = []
        for i in range(5):
            thread = threading.Thread(target=add_transactions, args=(i, 10))
            threads.append(thread)
            thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert len(results) == 5
        transactions = manager.get_transactions()
        assert len(transactions) == 50  # 5 –ø–æ—Ç–æ–∫–æ–≤ * 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-m", "not slow"])
