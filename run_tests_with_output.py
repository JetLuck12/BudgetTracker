#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ Budget Tracker —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""
import os
import sys
import subprocess
import datetime
from pathlib import Path


def create_reports_directory():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    reports_dir = Path("tests/reports")
    reports_dir.mkdir(parents=True, exist_ok=True)
    return reports_dir


def run_tests_with_output(test_file=None, output_format="html"):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    reports_dir = create_reports_directory()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    
    if test_file:
        base_name = f"test_{Path(test_file).stem}_{timestamp}"
    else:
        base_name = f"all_tests_{timestamp}"
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    if test_file:
        cmd = f"python -m pytest {test_file} -v"
    else:
        cmd = "python -m pytest tests/ -v"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
    if output_format == "html":
        html_file = reports_dir / f"{base_name}.html"
        cmd += f" --html={html_file} --self-contained-html"
    elif output_format == "json":
        json_file = reports_dir / f"{base_name}.json"
        cmd += f" --json-report --json-report-file={json_file}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞
    coverage_file = reports_dir / f"{base_name}_coverage.html"
    cmd += f" --cov=src --cov-report=html:{coverage_file} --cov-report=term-missing"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    cmd += " --tb=short"
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {cmd}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {reports_dir}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        console_file = reports_dir / f"{base_name}_console.txt"
        with open(console_file, 'w', encoding='utf-8') as f:
            f.write(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}\n")
            f.write(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.datetime.now()}\n")
            f.write("="*80 + "\n\n")
            f.write("STDOUT:\n")
            f.write(result.stdout)
            f.write("\n\nSTDERR:\n")
            f.write(result.stderr)
            f.write(f"\n\n–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}\n")
        
        print(f"‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –∫–æ–¥–æ–º: {result.returncode}")
        print(f"üìÑ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {console_file}")
        
        if output_format == "html":
            print(f"üåê HTML –æ—Ç—á–µ—Ç: {html_file}")
        if output_format == "json":
            print(f"üìä JSON –æ—Ç—á–µ—Ç: {json_file}")
        
        print(f"üìà –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏: {coverage_file}")
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
        return False


def run_specific_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    test_files = [
        "tests/test_core_simple.py",
        "tests/test_core.py", 
        "tests/test_api.py",
        "tests/test_integration.py"
    ]
    
    reports_dir = create_reports_directory()
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    
    results = {}
    
    for test_file in test_files:
        if os.path.exists(test_file):
            print(f"\n{'='*60}")
            print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {test_file}")
            print(f"{'='*60}")
            
            success = run_tests_with_output(test_file, "html")
            results[test_file] = success
            
            if success:
                print(f"‚úÖ {test_file} - –ü–†–û–®–ï–õ")
            else:
                print(f"‚ùå {test_file} - –ù–ï –ü–†–û–®–ï–õ")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
            results[test_file] = False
    
    # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    summary_file = reports_dir / f"test_summary_{timestamp}.txt"
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write(f"–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n")
        f.write(f"–í—Ä–µ–º—è: {datetime.datetime.now()}\n")
        f.write("="*50 + "\n\n")
        
        for test_file, success in results.items():
            status = "‚úÖ –ü–†–û–®–ï–õ" if success else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
            f.write(f"{test_file}: {status}\n")
        
        f.write(f"\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}\n")
        f.write(f"–ü—Ä–æ—à–ª–æ: {sum(results.values())}\n")
        f.write(f"–ù–µ –ø—Ä–æ—à–ª–æ: {len(results) - sum(results.values())}\n")
    
    print(f"\nüìã –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {summary_file}")
    
    return all(results.values())


def run_quick_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã"""
    print("‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã
    cmd = "python -m pytest tests/test_core_simple.py -v --tb=short"
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        reports_dir = create_reports_directory()
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        quick_file = reports_dir / f"quick_tests_{timestamp}.txt"
        
        with open(quick_file, 'w', encoding='utf-8') as f:
            f.write(f"–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã - {datetime.datetime.now()}\n")
            f.write("="*50 + "\n\n")
            f.write(result.stdout)
            f.write("\n" + "="*50 + "\n")
            f.write(result.stderr)
        
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {quick_file}")
        print(f"‚úÖ –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "quick":
            success = run_quick_tests()
        elif command == "all":
            success = run_tests_with_output()
        elif command == "specific":
            success = run_specific_tests()
        elif command == "simple":
            success = run_tests_with_output("tests/test_basic.py")
        elif command == "core":
            success = run_tests_with_output("tests/test_core.py")
        elif command == "api":
            success = run_tests_with_output("tests/test_api.py")
        elif command == "integration":
            success = run_tests_with_output("tests/test_integration.py")
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: quick, all, specific, simple, core, api, integration")
            sys.exit(1)
    else:
        print("üß™ Budget Tracker Test Runner")
        print("=" * 50)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python run_tests_with_output.py quick      - –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã")
        print("  python run_tests_with_output.py all        - –í—Å–µ —Ç–µ—Å—Ç—ã")
        print("  python run_tests_with_output.py specific   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print("  python run_tests_with_output.py simple     - –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã")
        print("  python run_tests_with_output.py core       - Core —Ç–µ—Å—Ç—ã")
        print("  python run_tests_with_output.py api        - API —Ç–µ—Å—Ç—ã")
        print("  python run_tests_with_output.py integration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print("  python run_tests_with_output.py quick")
        return
    
    if success:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main()
