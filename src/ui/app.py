import os, sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "..")))

from PyQt6.QtWidgets import QWidget, QVBoxLayout, QTabWidget
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QShortcut, QKeySequence, QKeyEvent
from core.manager import BudgetManager
from ui.tabs.transactions_tab import TransactionsTab
from ui.tabs.statistics_tab import StatisticsTab
from ui.styles import APP_STYLE
from ui.tabs.plan_tab import PlanTab

class BudgetApp(QWidget):
    def __init__(self):
        super().__init__()
        self.manager = BudgetManager()
        self.setWindowTitle("üí∏ Budget Tracker")
        self.showMaximized()
        self.setStyleSheet(APP_STYLE)

        self.tabs = QTabWidget()
        layout = QVBoxLayout(self)
        layout.addWidget(self.tabs)

        # –í–∫–ª–∞–¥–∫–∏
        self.transactions_tab = TransactionsTab(self.manager)
        self.statistics_tab = StatisticsTab(self.manager)
        self.plan_tab = PlanTab(self.manager)

        self.tabs.addTab(self.transactions_tab, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
        self.tabs.addTab(self.statistics_tab, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        self.tabs.addTab(self.plan_tab, "–ü–ª–∞–Ω")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_shortcuts()

    def setup_shortcuts(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        # Ctrl+Z –¥–ª—è –æ—Ç–º–µ–Ω—ã
        undo_shortcut = QShortcut(QKeySequence("Ctrl+Z"), self)
        undo_shortcut.activated.connect(self.undo_action)
        
        # Ctrl+Y –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è)
        redo_shortcut = QShortcut(QKeySequence("Ctrl+Y"), self)
        redo_shortcut.activated.connect(self.redo_action)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: Ctrl+Shift+Z –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
        redo_shortcut2 = QShortcut(QKeySequence("Ctrl+Shift+Z"), self)
        redo_shortcut2.activated.connect(self.redo_action)


    def undo_action(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Ctrl+Z - –æ—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if self.manager.undo():
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
            self.refresh_all_tabs()
            print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    def redo_action(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Ctrl+Y/Ctrl+Shift+Z/F4 - –ø–æ–≤—Ç–æ—Ä –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        if self.manager.redo():
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞
            self.refresh_all_tabs()
            print("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ")

    def refresh_all_tabs(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if hasattr(self.transactions_tab, 'refresh_transactions'):
            self.transactions_tab.refresh_transactions()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if hasattr(self.statistics_tab, 'refresh_statistics'):
            self.statistics_tab.refresh_statistics()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –ø–ª–∞–Ω–∞
        if hasattr(self.plan_tab, 'refresh_plan'):
            self.plan_tab.refresh_plan()
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            self.plan_tab.current_plan_state = self.manager.get_current_plan_state()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
        self.manager.is_undoing_redoing = False

    def keyPressEvent(self, event: QKeyEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        if event.modifiers() == Qt.KeyboardModifier.ControlModifier and event.key() == Qt.Key.Key_Z:
            # Ctrl+Z - –æ—Ç–º–µ–Ω–∞
            self.undo_action()
            event.accept()
        elif ((event.modifiers() == (Qt.KeyboardModifier.ControlModifier | Qt.KeyboardModifier.ShiftModifier) and 
               event.key() == Qt.Key.Key_Z) or
              (event.modifiers() == Qt.KeyboardModifier.ControlModifier and event.key() == Qt.Key.Key_Y)):
            # Ctrl+Shift+Z –∏–ª–∏ Ctrl+Y - –ø–æ–≤—Ç–æ—Ä
            self.redo_action()
            event.accept()
        else:
            super().keyPressEvent(event)
