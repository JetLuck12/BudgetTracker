from PyQt6.QtWidgets import QWidget, QVBoxLayout, QLabel, QHBoxLayout
from PyQt6.QtGui import QFont
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.dates as mdates

class StatisticsTab(QWidget):
    def __init__(self, manager):
        super().__init__()
        self.manager = manager
        self.init_ui()
        self.refresh_statistics()


    def init_ui(self):
        self.layout = QVBoxLayout(self)
        title = QLabel("üìä –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        title.setFont(QFont("Segoe UI", 16, QFont.Weight.Bold))
        self.layout.addWidget(title)

        self.balance_label = QLabel("–ë–∞–ª–∞–Ω—Å: 0")
        self.income_label = QLabel("–î–æ—Ö–æ–¥—ã: 0")
        self.expense_label = QLabel("–†–∞—Å—Ö–æ–¥—ã: 0")
        for w in [self.balance_label, self.income_label, self.expense_label]:
            self.layout.addWidget(w)
        # === –ë–ª–æ–∫ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–†–æ—Å—Ç –±–∞–ª–∞–Ω—Å–∞ + –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã) ===
        graphs_layout = QHBoxLayout()

        # ==== –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ ====
        balance_container = QVBoxLayout()
        balance_title = QLabel("üìà –†–æ—Å—Ç –±–∞–ª–∞–Ω—Å–∞")
        balance_title.setFont(QFont("Segoe UI", 14, QFont.Weight.Bold))
        balance_container.addWidget(balance_title)

        self.balance_fig = plt.Figure(figsize=(5, 3))
        self.balance_canvas = FigureCanvas(self.balance_fig)
        balance_container.addWidget(self.balance_canvas)

        # ==== –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ ====
        weekday_container = QVBoxLayout()
        weekday_title = QLabel("üìÜ –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
        weekday_title.setFont(QFont("Segoe UI", 14, QFont.Weight.Bold))
        weekday_container.addWidget(weekday_title)

        self.weekday_fig = plt.Figure(figsize=(5, 3))
        self.weekday_canvas = FigureCanvas(self.weekday_fig)
        weekday_container.addWidget(self.weekday_canvas)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–∞ –±–ª–æ–∫–∞ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout
        graphs_layout.addLayout(balance_container)
        graphs_layout.addLayout(weekday_container)

        self.layout.addLayout(graphs_layout)

        # === 3. –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ ===
        self.top_fig = Figure(figsize=(4, 4))

        self.top_canvas = FigureCanvas(self.top_fig)
        self.layout.addWidget(self.top_canvas)

    def refresh_statistics(self):
        stats = self.manager.get_financial_summary()
        if "balance" in stats and "income" in stats and "expense" in stats:
            self.balance_label.setText(f"–ë–∞–ª–∞–Ω—Å: {stats["balance"]} ‚ÇΩ")
            self.income_label.setText(f"–î–æ—Ö–æ–¥—ã: {stats["income"]} ‚ÇΩ")
            self.expense_label.setText(f"–†–∞—Å—Ö–æ–¥—ã: {abs(stats["expense"])} ‚ÇΩ")

        # --- –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ ---
        graph = self.manager.get_graph_summary()
        if len(graph) != 2:
            return
        dates, balances = self.manager.get_graph_summary()

        if len(dates) > 0:
            self.balance_fig.clear()
            ax = self.balance_fig.add_subplot(111)
            ax.plot(dates, balances, color="green", linewidth=2, marker="o")
            ax.set_title("–†–æ—Å—Ç –±–∞–ª–∞–Ω—Å–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
            ax.set_xlabel("–î–∞—Ç–∞")
            ax.set_ylabel("–ë–∞–ª–∞–Ω—Å, ‚ÇΩ")
            ax.grid(True, linestyle="--", alpha=0.5)

            # --- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç ---
            ax.xaxis.set_major_formatter(mdates.DateFormatter("%d.%m"))
            ax.xaxis.set_major_locator(mdates.AutoDateLocator())

            # --- –Ω–∞–∫–ª–æ–Ω –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X ---
            for label in ax.get_xticklabels():
                label.set_rotation(45)
                label.set_ha("right")

            self.balance_fig.tight_layout()
            self.balance_canvas.draw()

        # --- –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ ---
        weekdays, expenses = self.manager.get_expenses_by_weekday()

        self.weekday_fig.clear()
        ax = self.weekday_fig.add_subplot(111)

        if weekdays and expenses:
            bars = ax.bar(weekdays, expenses, color="#ff6f61")
            ax.set_title("–°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
            ax.set_ylabel("‚ÇΩ")
            ax.set_xlabel("–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏")
            ax.bar_label(bars, fmt="%.0f ‚ÇΩ", label_type="edge")
            ax.grid(True, linestyle="--", alpha=0.4)
            self.weekday_fig.tight_layout()
        else:
            ax.text(0.5, 0.5, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", ha="center", va="center", fontsize=12, color="gray")

        self.weekday_canvas.draw()
        self.update_top_categories_chart()

    def update_top_categories_chart(self):
        categories, percentages = self.manager.get_top_expense_categories()
        if not categories:
            return

        self.top_fig.clear()
        ax = self.top_fig.add_subplot(111)
        ax.pie(percentages, labels=categories, autopct='%1.1f%%', startangle=90)
        ax.set_title("üè∑Ô∏è –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤")
