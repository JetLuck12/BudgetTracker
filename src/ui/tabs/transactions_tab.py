from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QSplitter,
    QListWidget, QLabel, QPushButton, QLineEdit,
    QMessageBox, QFileDialog, QInputDialog, QScrollArea,
    QCheckBox, QDialog
)
from PyQt6.QtCore import Qt
import json
import os

from src.core.transaction import Transaction

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
INCOME_TYPE = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
ERROR_TITLE = "–û—à–∏–±–∫–∞"
PREFS_FILE = "user_preferences.json"


class CustomMessageBox(QDialog):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π MessageBox —Å —á–µ–∫–±–æ–∫—Å–æ–º '–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å'"""
    
    def __init__(self, title, message, message_type="info", parent=None):
        super().__init__(parent)
        self.title = title
        self.message = message
        self.message_type = message_type
        self.init_ui()
        
    def init_ui(self):
        self.setWindowTitle(self.title)
        self.setModal(True)
        self.resize(400, 150)
        
        layout = QVBoxLayout(self)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        message_label = QLabel(self.message)
        message_label.setWordWrap(True)
        layout.addWidget(message_label)
        
        # –ß–µ–∫–±–æ–∫—Å
        self.dont_show_checkbox = QCheckBox("–ë–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        layout.addWidget(self.dont_show_checkbox)
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        self.ok_button = QPushButton("OK")
        self.ok_button.clicked.connect(self.accept)
        button_layout.addWidget(self.ok_button)
        layout.addLayout(button_layout)
        
    def should_show_message(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        prefs = self.load_preferences()
        key = f"dont_show_{self.message_type}_{self.title.lower().replace(' ', '_')}"
        return not prefs.get(key, False)
    
    def save_preference(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.dont_show_checkbox.isChecked():
            prefs = self.load_preferences()
            key = f"dont_show_{self.message_type}_{self.title.lower().replace(' ', '_')}"
            prefs[key] = True
            self.save_preferences(prefs)
    
    def load_preferences(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if os.path.exists(PREFS_FILE):
                with open(PREFS_FILE, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception:
            pass
        return {}
    
    def save_preferences(self, prefs):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with open(PREFS_FILE, 'w', encoding='utf-8') as f:
                json.dump(prefs, f, ensure_ascii=False, indent=2)
        except Exception:
            pass
    
    def show_message(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª –µ–≥–æ"""
        if self.should_show_message():
            self.exec()
            self.save_preference()


class TransactionsTab(QWidget):
    def __init__(self, manager):
        super().__init__()
        self.manager = manager
        self.init_ui()

    def init_ui(self):
        layout = QHBoxLayout(self)
        splitter = QSplitter(Qt.Orientation.Horizontal)
        layout.addWidget(splitter)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        left = QWidget()
        left_layout = QVBoxLayout(left)
        self.amount_input = QLineEdit()
        self.amount_input.setPlaceholderText("–°—É–º–º–∞")
        self.category_input = QLineEdit()
        self.category_input.setPlaceholderText("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        self.note_input = QLineEdit()
        self.note_input.setPlaceholderText("–ó–∞–º–µ—Ç–∫–∞")

        add_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_btn.clicked.connect(self.add_transaction)
        import_btn = QPushButton("üìÇ –ò–º–ø–æ—Ä—Ç")
        import_btn.clicked.connect(self.import_report)
        delete_btn = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å")
        delete_btn.clicked.connect(self.delete_report)
        reset_notifications_btn = QPushButton("üîî –°–±—Ä–æ—Å–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        reset_notifications_btn.clicked.connect(self.reset_notification_preferences)

        for w in [self.amount_input, self.category_input, self.note_input, add_btn, import_btn, delete_btn, reset_notifications_btn]:
            left_layout.addWidget(w)
        left_layout.addStretch(1)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        right = QWidget()
        right_layout = QVBoxLayout(right)
        right_layout.addWidget(QLabel("üßæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫"))
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        scroll_area = QScrollArea()
        self.transactions_widget = QWidget()
        self.transactions_layout = QVBoxLayout(self.transactions_widget)
        scroll_area.setWidget(self.transactions_widget)
        scroll_area.setWidgetResizable(True)
        right_layout.addWidget(scroll_area)

        splitter.addWidget(left)
        splitter.addWidget(right)
        splitter.setSizes([300, 500])

        self.refresh_transactions()

    def add_transaction(self):
        try:

            amount = float(self.amount_input.text())
            self.manager.add_transaction(Transaction(amount = amount,
                                                     category = self.category_input.text().strip() or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                                     note = self.note_input.text().strip(),
                                                     report_id=-1,
                                                     type_=INCOME_TYPE if amount > 0 else "–°–ø–∏—Å–∞–Ω–∏–µ"))
            self.amount_input.clear()
            self.category_input.clear()
            self.note_input.clear()
            CustomMessageBox("–£—Å–ø–µ—à–Ω–æ", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", "success", self).show_message()
            self.refresh_transactions()
        except ValueError:
            CustomMessageBox(ERROR_TITLE, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!", "warning", self).show_message()

    def import_report(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞", "", "Excel (*.xlsx *.xls);;CSV (*.csv)"
        )
        if not file_path:
            return
        try:
            report_id = self.manager.import_from_file(file_path)
            CustomMessageBox("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω", f"–û—Ç—á—ë—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (ID: {report_id})", "success", self).show_message()
            self.refresh_transactions()
        except Exception as e:
            CustomMessageBox(ERROR_TITLE, str(e), "error", self).show_message()

    def delete_report(self):
        report_id, ok = QInputDialog.getInt(self, "–£–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç", "–í–≤–µ–¥–∏—Ç–µ ID –æ—Ç—á—ë—Ç–∞:")
        if not ok:
            return
        try:
            self.manager.delete_report(report_id)
            CustomMessageBox("–£–¥–∞–ª–µ–Ω–æ", f"–û—Ç—á—ë—Ç #{report_id} —É–¥–∞–ª—ë–Ω.", "success", self).show_message()
            self.refresh_transactions()
        except Exception as e:
            CustomMessageBox(ERROR_TITLE, str(e), "error", self).show_message()

    def refresh_transactions(self):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        for i in reversed(range(self.transactions_layout.count())):
            item = self.transactions_layout.itemAt(i)
            if item and item.widget():
                item.widget().setParent(None)
        
        transactions = self.manager.get_transactions()
        if not isinstance(transactions, list):
            return
        
        for tran in transactions:
            transaction_widget = self.create_transaction_widget(tran)
            self.transactions_layout.addWidget(transaction_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü
        self.transactions_layout.addStretch()

    def create_transaction_widget(self, transaction):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QHBoxLayout(widget)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        sign = "+" if transaction.type_ == INCOME_TYPE else "-"
        symbol = "üü©" if transaction.type_ == INCOME_TYPE else "üü•"
        text = f"{symbol} {transaction.date} | {sign}{transaction.amount:.2f} ‚ÇΩ | {transaction.category}"
        if transaction.note:
            text += f" ‚Äî {transaction.note}"
        text += f" | –æ—Ç—á—ë—Ç #{transaction.report_id}"
        
        # –°–æ–∑–¥–∞–µ–º –ª–µ–π–±–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        label = QLabel(text)
        label.setWordWrap(True)
        layout.addWidget(label, 1)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton("üóë")
        delete_btn.setMaximumWidth(30)
        delete_btn.setToolTip("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        delete_btn.clicked.connect(lambda: self.delete_transaction(transaction.id))
        layout.addWidget(delete_btn)
        
        return widget

    def delete_transaction(self, transaction_id):
        """–£–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –µ—ë ID —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
        reply = QMessageBox.question(
            self, 
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?\n\nüí° –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é Ctrl+Z",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            try:
                self.manager.delete_transaction(transaction_id)
                CustomMessageBox("–£—Å–ø–µ—à–Ω–æ", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞!\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+Z –¥–ª—è –æ—Ç–º–µ–Ω—ã", "success", self).show_message()
                self.refresh_transactions()
            except Exception as e:
                CustomMessageBox(ERROR_TITLE, f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: {str(e)}", "error", self).show_message()
    
    def reset_notification_preferences(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if os.path.exists(PREFS_FILE):
                os.remove(PREFS_FILE)
            CustomMessageBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã", "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è.", "info", self).show_message()
        except Exception as e:
            CustomMessageBox(ERROR_TITLE, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}", "error", self).show_message()
