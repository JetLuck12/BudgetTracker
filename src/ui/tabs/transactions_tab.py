from PyQt6.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QSplitter,
    QListWidget, QLabel, QPushButton, QLineEdit,
    QMessageBox, QFileDialog, QInputDialog
)
from PyQt6.QtCore import Qt

from src.core.transaction import Transaction


class TransactionsTab(QWidget):
    def __init__(self, manager):
        super().__init__()
        self.manager = manager
        self.init_ui()

    def init_ui(self):
        layout = QHBoxLayout(self)
        splitter = QSplitter(Qt.Orientation.Horizontal)
        layout.addWidget(splitter)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å
        left = QWidget()
        left_layout = QVBoxLayout(left)
        self.amount_input = QLineEdit()
        self.amount_input.setPlaceholderText("–°—É–º–º–∞")
        self.category_input = QLineEdit()
        self.category_input.setPlaceholderText("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        self.note_input = QLineEdit()
        self.note_input.setPlaceholderText("–ó–∞–º–µ—Ç–∫–∞")

        add_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_btn.clicked.connect(self.add_transaction)
        import_btn = QPushButton("üìÇ –ò–º–ø–æ—Ä—Ç")
        import_btn.clicked.connect(self.import_report)
        delete_btn = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å")
        delete_btn.clicked.connect(self.delete_report)

        for w in [self.amount_input, self.category_input, self.note_input, add_btn, import_btn, delete_btn]:
            left_layout.addWidget(w)
        left_layout.addStretch(1)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å
        right = QWidget()
        right_layout = QVBoxLayout(right)
        right_layout.addWidget(QLabel("üßæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫"))
        self.transactions_list = QListWidget()
        right_layout.addWidget(self.transactions_list)

        splitter.addWidget(left)
        splitter.addWidget(right)
        splitter.setSizes([300, 500])

        self.refresh_transactions()

    def add_transaction(self):
        try:

            amount = float(self.amount_input.text())
            self.manager.add_transaction(Transaction(amount = amount,
                                                     category = self.category_input.text().strip() or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                                                     note = self.note_input.text().strip(),
                                                     report_id=-1,
                                                     type_="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if amount > 0 else "–°–ø–∏—Å–∞–Ω–∏–µ"))
            self.amount_input.clear()
            self.category_input.clear()
            self.note_input.clear()
            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            self.refresh_transactions()
        except ValueError:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")

    def import_report(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –æ—Ç—á—ë—Ç–∞", "", "Excel (*.xlsx *.xls);;CSV (*.csv)"
        )
        if not file_path:
            return
        try:
            report_id = self.manager.import_from_file(file_path)
            QMessageBox.information(self, "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω", f"–û—Ç—á—ë—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (ID: {report_id})")
            self.refresh_transactions()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def delete_report(self):
        report_id, ok = QInputDialog.getInt(self, "–£–¥–∞–ª–∏—Ç—å –æ—Ç—á—ë—Ç", "–í–≤–µ–¥–∏—Ç–µ ID –æ—Ç—á—ë—Ç–∞:")
        if not ok:
            return
        try:
            self.manager.delete_report(report_id)
            QMessageBox.information(self, "–£–¥–∞–ª–µ–Ω–æ", f"–û—Ç—á—ë—Ç #{report_id} —É–¥–∞–ª—ë–Ω.")
            self.refresh_transactions()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))

    def refresh_transactions(self):
        self.transactions_list.clear()
        transactions = self.manager.get_transactions()
        if type(transactions) != list:
            return
        for tran in transactions:
            sign = "+" if tran.type_ == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" else "-"
            symbol = "üü©" if tran.type_ == "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" else "üü•"
            text = f"{symbol} {tran.date} | {sign}{tran.amount:.2f} ‚ÇΩ | {tran.category}"
            if tran.note:
                text += f" ‚Äî {tran.note}"
            text += f" | –æ—Ç—á—ë—Ç #{tran.report_id}"
            self.transactions_list.addItem(text)
